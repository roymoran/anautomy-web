<% provide(:title, "New Service Request") %>

<div class = "container-fluid">
  <div class="row">
  <div class="col-sm-5 col-sm-offset-1 text-center">
    <h2 class="main-headline">New Service Request</h2>
    <br>
    <%= form_for @sr, html: {class: ""} do |f| %>
    
    <%= f.select(:car_id, nil, {}, {class: "select-car-menu"}) do %>
    <option>Select Your Car</option>
      <% @cars_list.each do |c| %>
        <%= content_tag(:option, c["car_name"], value: c["id"]) %>
      <% end %>
    <% end %>

    <%= f.text_field :pickup_location, class: 'service-request-field', id: 'autocomplete', placeholder: "Pickup Location (address, city, state or zip)"%>
    <%= f.hidden_field :search_street_number, id: 'street_number'%>
    <%= f.hidden_field :search_route, id: 'route'%>
    <%= f.hidden_field :search_locality, id: 'locality' %>
    <%= f.hidden_field :search_administrative_area_level_1, id: 'administrative_area_level_1' %>
    <%= f.hidden_field :search_postal_code, id: 'postal_code'%>
    <%= f.hidden_field :search_country, id: 'country' %>

    <a data-toggle="modal" data-target="#myModal" href="#">
      <div class="select_submission_form text-left">
        <div class ="repair_name_div" style="float:left; width:90%; overflow: hidden; text-overflow:ellipsis; white-space: nowrap;">Select Repair</div><i class="fa fa-th text-right" aria-hidden="true" style="float:right; padding-top:4px;"></i>
      </div>
    </a>

    <div class="modal fade repairs-modal" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title" id="myModalLabel">Select Repair</h4>
          </div>
          <div class="modal-body" id="carddata">
            <div class="row" >
              <div class="col-xs-6 text-left">
                <input id="cardsearchinput" placeholder="Quick Filter"/ >
              </div>
            </div>
            <% @repair_category.each do |category| %>
            
            <div class="row card">
              <div class="col-sm-12">
                <h4 class="text-left"><u><%= category.name%></u></h4>
              </div>
              <% category.repair_names.each do |repair| %>
              <div class="col-sm-4"><p><a class="repair-name-text" href="#" data-cat="<%=category.name%>" data-catid="<%=category.id%>" data-repid="<%=repair.id%>" data-dismiss="modal"><%= repair.name %></a></p></div>
            <% end %>
          </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-sm-6">
    <%= f.select(:preferred_day, nil, {}, {class: "select-car-menu"}) do %>
    <option>Preferred Day</option>
    <% [['Weekday'], ['Weekend']].each do |c| -%>
    <%= content_tag(:option, c.first, value: c.first) %>
    <% end %>
    <% end %>
  </div>
  <div class="col-sm-6">
    <%= f.select(:preferred_time, nil, {}, {class: "select-car-menu"}) do %>
    <option>Preferred Time</option>
    <% [['Morning (8am-12pm)'], ['Afternoon (12pm-4pm)'], ['Evening (4pm-8pm)']].each do |c| -%>
    <%= content_tag(:option, c.first, value: c.first) %>
    <% end %>
    <% end %>
  </div>
    </div>
    <%= f.hidden_field :car_owner_id %>
    <%= f.hidden_field :repair_name %>
    <%= f.submit "Create", class: "btn btn-auth-form mp-service-request-created" %>
    <% end %>

    <br><br>
  </div>
  <div class = "col-sm-6">
      <div class = "row">
        <div class = "col-lg-12">
           <div id="map"></div>
        </div>
      </div>
    </div>
</div>
</div>


<%= javascript_include_tag "https://maps.googleapis.com/maps/api/js?key="+ @google_api_key +"&libraries=places&callback=initAutocomplete", defer: true, async: true %>

<script>

      var HttpClient = function() {
        this.get = function(aUrl, aCallback) {
          var anHttpRequest = new XMLHttpRequest();
          anHttpRequest.onreadystatechange = function() { 
            if (anHttpRequest.readyState == 4 && anHttpRequest.status == 200){
              aCallback(anHttpRequest.responseText);
            }
          }
          anHttpRequest.open( "GET", aUrl, true );            
          anHttpRequest.send( null );
        }
      }
      
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
        updateMap(document.getElementById('autocomplete').value);
      }

      function updateMap(place){
        var client = new HttpClient();
        client.get('/api/place_coordinates?location=' + place, initMap);
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }

      var map;
      var infowindow;

      function initMap(response) {
        json_o = JSON.parse(response);
        locationCoordinates = json_o["results"][0]["geometry"]["location"]  
        var location = {lat: locationCoordinates.lat, lng: locationCoordinates.lng};
        var mapelement = document.getElementById('map');
        map = new google.maps.Map(mapelement, {
          center: location,
          zoom: 14
        });

        infowindow = new google.maps.InfoWindow();

        createMarker(location);
      }

      function callback(results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          prepareFirstShopProfile(results[0])
          for (var i = 0; i < results.length; i++) {
            createMarker(results[i]);
          }
        }
      }

      function createMarker(location) {
        var marker = new google.maps.Marker({
          map: map,
          position: location
        });

        google.maps.event.addListener(marker, 'click', function() {
          infowindow.setContent('Car pickup location');
          infowindow.open(map, this);
        });
      }

//Following line for chrome debugging purposes
//# sourceURL=NewServiceRequest.js 
 </script>